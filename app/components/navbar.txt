"use client";
// import { useCart } from "./contexts/page";
import Image from "next/image";
import Link from "next/link";
import { MdAccountCircle, MdOutlineAccountCircle } from "react-icons/md";
import { BsFillMoonStarsFill } from "react-icons/bs";
import { use, useEffect, useState } from "react";
import {
  AiFillMinusCircle,
  AiFillPlusCircle,
  AiOutlineShoppingCart,
} from "react-icons/ai";
import { FaSearch } from "react-icons/fa";
import { ImCancelCircle } from "react-icons/im";
import { useAppContext } from "../contexts/page";
import { useSearchParams,useRouter,usePathname } from "next/navigation";
import Search from "../search/page";
import { document } from "postcss";

export default function Navbar() {
  let {
    user,
    bar,
    setBar,
    cart,
    subtotal,
    clearCart,
    removeItemFromCart,
    addToCart,
    Logout,
  } = useAppContext();
  const [nav, setNav] = useState(false);
  const [darkMode,setDarkMode]=useState(undefined)
  const [query, setQuery] = useState("");
  const [results, setResults] = useState([]);
  const [search, setSearch] = useState(false);
  const searchParams = useSearchParams()
  const pathname = usePathname()
  const {replace} = useRouter()
  const router = useRouter();
  console.log(darkMode);

useEffect(()=>{
  setSearch(true)
  handleSearch()
  // console.log(query)
},[query])
  const handleSearch = async ()=>{
    const params = new URLSearchParams(searchParams)
  if(query){
    params.set('query',query)
  }   
  else{
    params.delete('query')
  }
 replace(`${pathname}?${params.toString()}`)
  const res = await fetch(`/api/searchNavbar?query=${query}`);
    const data = await res.json();
    if(data.success){
    setResults(data.results);
    setSearch(false)
    }else{
      setResults([])
    }
  }

const selected =()=>{
  // router.push(`/product/${slug}`) 
  setResults([])
}
const handleSubmit=()=>{
  setResults([]);
  setSearch(false);

}

const handleImage=(index)=>{

  let remove = results.filter((v,i)=> i !== index)
   setResults(remove)

}
 useEffect(() => {
if(darkMode){
  localStorage.setItem("darkMode","true");
  window.document.documentElement.classList.add('dark');
}else if(darkMode === false){
  localStorage.setItem("darkMode","false")
  window.document.documentElement.classList.remove('dark')
}
else{
  setDarkMode(localStorage.getItem("darkMode") === "true")
}
 }, [darkMode]);

  return (
    <>
      <div className="bg-white dark:bg-[#111827] w-[1225px] h-[210px] shadow-md fixed top-0 z-10">
        <div className="mt-2  mx-auto w-[320px]  outline-none">
          <Link href={"/"}>
            <img src="/codeswear.jpg" />
          </Link>
        </div>
        <form>
          <div className="flex gap-2 mt-4">
            {query && (
              <span
                onClick={() => setQuery("")}
                className=" absolute left-[65.5%] z-50 top-[53%] cursor-pointer text-pink-400 "
              >
                <ImCancelCircle />
              </span>
            )}
            <input
              type="text"
              placeholder="Search  From our Products"
              onChange={(e) => {
                setQuery(e.target.value);
              }}
              value={query}
              defaultValue={searchParams.get("query")?.toString()}
              className="w-[500px] ml-[330px] h-9 border-[1px] border-gray-300 rounded  outline-none pl-3 text-sm focus:border-pink-400"
            />
            <Link href={`/search?Query=${query}`}>
              <button
                onClick={handleSubmit}
                disabled={!query}
                className="bg-pink-600 w-14 h-9 rounded-[5px] outline-none  hover:bg-pink-700  "
              >
                <FaSearch className="size-4 ml-5 text-white" />
              </button>
            </Link>
          </div>
        </form>
        <div className="z-10 shadow-2xl absolute w-[40.3%] ml-[333px] mt-4 h-auto dark:bg-[#374151] bg-white">
          {!search &&
            results.map((res, index) => (
              <Link href={`/product/${res.slug}`}>
                <div
                  key={res._id}
                  className="p-4 flex hover:bg-pink-200 dark:hover:bg-pink-600 cursor-pointer"
                  onClick={selected}
                >
                  <Image
                    src={res.img}
                    width={35}
                    height={35}
                    alt={res.tittle}
                    className="rounded-lg"
                    onError={() => {
                      handleImage(index);
                    }}
                  />
                  <p className="font-sans pl-2 font-medium pb-2 dark:text-gray-100">
                    {res.tittle}
                  </p>
                </div>
              </Link>
            ))}
          {search && query && (
            <div class="animate-pulse flex space-x-4 p-5 dark:bg-[#1f2937]">
              <div class="rounded bg-slate-700 h-12 w-12"></div>
              <div class="flex-1 space-y-6 py-1">
                <div class="h-2 bg-slate-700 rounded "></div>
                <div class="space-y-3">
                  <div class="h-2 bg-slate-700 rounded "></div>
                </div>
              </div>
            </div>
          )}
        </div>
        <div className="ml-[350px]  mt-6 text-[14px]">
          <ul className="absolute bottom-3 flex gap-4 mb-0 dark:text-gray-100 ">
            <Link href="/tshirts">
              <li className=" text-[17px] font-sans hover:text-pink-500 font-bold dark:font-medium ">
                T-Shirts
              </li>
            </Link>
            <Link href="/hoodies">
              {" "}
              <li className="text-[17px] font-sans hover:text-pink-500 font-bold dark:font-medium ">
                Hoodies
              </li>
            </Link>
            <Link href="/mugs">
              <li className=" text-[17px] font-sans hover:text-pink-500  font-bold dark:font-medium  ">
                Mugs
              </li>
            </Link>
            <Link href="/phones">
              <li className="text-[17px] font-sans hover:text-pink-500 font-bold dark:font-medium ">
                Phone
              </li>
            </Link>
            <Link href="/shoes">
              <li className="text-[17px] font-sans hover:text-pink-500 font-bold dark:font-medium ">
                Shoes
              </li>
            </Link>
          </ul>
        </div>
        <div>
          <button onClick={() => setBar(true)} className="ml-[695px] ">
            <AiOutlineShoppingCart className="size-8 text-pink-600  hover:text-pink-700 " />
          </button>
          {/* {Object.keys(cart).length > 0 && ( */}
          <div className="absolute left-[58.2%] bottom-[29px] bg-pink-600 rounded-[50%] w-[19px] h-[19px]">
            <span className=" text-[11px] relative top-[-5px] left-[5px] font-extrabold dark:text-gray-100 dark:font-normal  ">
              {Object.keys(cart).length}
            </span>
          </div>
          {/* )} */}
        </div>
        {!user.value && (
          <Link href="/login">
            <button className="hover:bg-pink-700 w-14 h-[31px] font-sans bg-pink-600 rounded-md text-[14px] dark:font-normal text-white absolute left-[60.6%] bottom-3 font-bold">
              Login
            </button>
          </Link>
        )}
        {user.value && (
          <button
            // onMouseOver={() => setNav(true)}
            onMouseEnter={() => setNav(true)}
            className="absolute left-[60.6%] bottom-3"
          >
            <MdOutlineAccountCircle className="size-[30px] text-pink-600 hover:text-pink-700" />
          </button>
        )}
        {nav && (
          <div
            // onMouseOver={() => setNav(true)}
            onMouseLeave={() => setNav(false)}
            className="w-[150px] h-[80px] bg-white shadow-2xl dark:bg-[#374151] cursor-pointer z-10 font-extrabold text-[14px] text-center py-2 rounded dark:text-gray-100 dark:font-normal absolute left-[55%] top-[75%] "
          >
            <Link href="/myAccount">
              <p onClick={() => setNav(false)} className=" hover:text-pink-500">
                MY Account
              </p>
            </Link>
            <Link href="/order">
              <p onClick={() => setNav(false)} className=" hover:text-pink-500">
                Orders
              </p>
            </Link>
            <p
              onClick={() => {
                Logout();
                setNav(false);
              }}
              className=" hover:text-pink-500"
            >
              LogOut
            </p>
          </div>
        )}
        <div
          className={`absolute  bottom-2  ${
            !user.value ? "left-[66%]" : "left-[64%]"
          } `}
        >
          <button onClick={() => setDarkMode(!darkMode)}>
            <BsFillMoonStarsFill className="size-7 text-pink-600  outline-none hover:text-pink-700 " />
          </button>
        </div>
      </div>

      {bar && (
        <div className="w-[380px] h-[100vh] overflow-y-scroll bg-pink-100  dark:bg-[#374151] fixed z-20 right-0 top-0 transition-all duration-1000 ">
          <button
            onClick={() => setBar(false)}
            className="absolute right-4 top-7 cursor-pointer"
          >
            <ImCancelCircle className="size-6 dark:text-gray-100" />
          </button>
          <div>
          <h3 className="text-2xl font-bold font-sans ml-7 pt-6 dark:text-gray-100 ">
              Shopping Cart
          </h3>
          {Object.keys(cart).length == 0 && (
              <div>
                <p className="text-[15px] font-sans font-semibold mt-8 ml-14 dark:text-gray-100 ">
                  Your cart is Empty!
                </p>
              </div>
            )}
          {Object.keys(cart).map((k) => {
              return (
                <div key={k} className="flex mx-9 mt-12">
                  <div className="w-[50px] relative">
                    <Image
                      src={cart[k].img}
                      width={50}
                      height={10}
                      alt="img"
                      priority
                      className="rounded-lg"
                    />
                    <div className="absolute left-10 top-[-12px] m-0 p-0 bg-pink-600 rounded-[50%] w-[20px] h-[20px]">
                      <span className="text-[10px] relative top-[-4px] left-[5px] font-extrabold dark:text-gray-100 dark:font-normal">
                        {cart[k].qty}
                      </span>
                    </div>
                  </div>
                  <div className="w-[150px]">
                    <p className="font-semibold font-sans ml-2 mt-[5px] text-[13px] break-words  dark:text-gray-100 ">
                      {cart[k].name}
                      {cart[k].variant && cart[k].size ? (
                        <>
                          ({cart[k].variant}/{cart[k].size} )
                        </>
                      ) : (
                        ""
                      )}
                    </p>
                  </div>

                  <div className="absolute right-9 flex mt-4">
                    <span>
                      <AiFillPlusCircle
                        onClick={() =>
                          addToCart(
                            k,
                            1,
                            cart[k].name,
                            cart[k].price,
                            cart[k].size,
                            cart[k].variant,
                            cart[k].img
                          )
                        }
                        className="text-pink-500 size-5 cursor-pointer"
                      />
                    </span>
                    <span className="font-semibold mx-[3px] dark:text-gray-100 ">
                      {cart[k].qty}
                    </span>
                    <span>
                      <AiFillMinusCircle
                        onClick={() =>
                          removeItemFromCart(
                            k,
                            cart[k].name,
                            cart[k].price,
                            1,
                            cart[k].size,
                            cart[k].variant,
                            cart[k].img
                          )
                        }
                        className="text-pink-500 size-5 cursor-pointer "
                      />
                    </span>
                  </div>
                </div>
              );
            })}
            <h3 className="font-bold dark:text-gray-100 font-sans text-[17px] mt-9 ml-9">
              Subtotal: ${subtotal}
            </h3>
          </div>
          <div className="flex mb-7">
            <Link href="/checkOut">
              <button
                disabled={Object.keys(cart).length == 0}
                className="disabled:bg-pink-300 hover:bg-pink-600 w-20 h-[35px] bg-pink-500 rounded text-[14px] text-white ml-9 mt-6"
              >
                Checkout
              </button>
            </Link>

            <button
              onClick={clearCart}
              disabled={Object.keys(cart).length == 0}
              className=" disabled:bg-pink-300 w-16 h-[35px] bg-pink-500 rounded text-[14px] text-white ml-9 mt-6 relative right-7 hover:bg-pink-600"
            >
              Clear
            </button>
          </div>
        </div>
      )}
    </>
  );
}
